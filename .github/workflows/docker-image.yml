name: Docker Image CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Verificare Repo
        uses: actions/checkout@v4

      # Obține numărul de build și data build-ului
      - name: Obține Număr de Build și Data Build-ului
        id: build_info
        run: |
          echo "BUILD_NUMBER=${{ github.run_number }}" >> $GITHUB_ENV
          echo "BUILD_DATE=${{ github.event.head_commit.timestamp }}" >> $GITHUB_ENV

      # Autentificare pe Docker Hub cu o metodă sigură
      - name: docker login
        env:
          DOCKER_USER: ${{secrets.DOCKER_USER}}
          DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
        run: |
          docker login -u $DOCKER_USER -p $DOCKER_PASSWORD

      # Construiește imaginea Docker
      - name: Construiește Imaginea Docker
        run: |
          TAG="v1.0.${{ github.run_number }}"
          docker build . --file Dockerfile --tag "${{ secrets.DOCKER_USER }}/openvpn-as:${TAG}" --build-arg VERSION="${{ github.run_number }}" --build-arg BUILD_DATE="${{ github.event.head_commit.timestamp }}"
          docker build . --file Dockerfile --tag "${{ secrets.DOCKER_USER }}/openvpn-as:latest" --build-arg VERSION="${{ github.run_number }}" --build-arg BUILD_DATE="${{ github.event.head_commit.timestamp }}"

      # Publică imaginea Docker
      - name: Publică Docker
        run: |
          TAG="v1.0.${{ github.run_number }}"
          docker push "${{ secrets.DOCKER_USER }}/openvpn-as:${TAG}"
          docker push "${{ secrets.DOCKER_USER }}/openvpn-as:latest"

      # Șterge versiunile mai vechi, păstrând doar ultimele 3
      - name: Șterge versiunile mai vechi
        run: |
          # Lista versiunilor existente
          IMAGES=$(docker images --filter=reference="${{ secrets.DOCKER_USER }}/openvpn-as:v1.0.*" --format "{{.Repository}}:{{.Tag}}")
          echo "Imagini existente: $IMAGES"

          # Extrage ultimele 3 imagini
          KEEP_IMAGES=$(echo "$IMAGES" | head -n 3)
          echo "Imagini de păstrat: $KEEP_IMAGES"

          # Șterge versiunile care nu sunt în lista de păstrat
          for IMAGE in $IMAGES; do
            if ! echo "$KEEP_IMAGES" | grep -q "$IMAGE"; then
              echo "Ștergere imagine: $IMAGE"
              docker rmi "$IMAGE" || true
            fi
          done
